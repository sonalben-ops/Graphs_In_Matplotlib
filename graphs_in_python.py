# -*- coding: utf-8 -*-
"""Graphs_In_Python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NmntUqYaUSK_CD91_ZvmUqB2ts2D9DIQ

# Line Graph
"""

import matplotlib.pyplot as plt
# data to display on plots
x = [9, 5, 1]
y = [1, 5, 9]

# This will plot a simple line chart
# with elements of x as x axis and y
# as y axis
plt.plot(x, y)
plt.title("Line Chart")

# Adding the legends
plt.legend(["Line"])
plt.show()

"""# Stem Plot Graph"""

# importing libraries
import matplotlib.pyplot as plt
import numpy as np

x = np.linspace(0.1, 5 * 3, 30)
y = np.exp(np.sin(x))

plt.stem(x, y, use_line_collection = True)
plt.show()

"""# Bar Chart"""

import matplotlib.pyplot as plt
# data to display on plots
x = [2,3,5,3,8,4,9,12,10,6,12]
y = [6,8,2,9,4,7,3,10,9,11,4]

# This will plot a simple bar chart
plt.bar(x, y)

# Title to the plot
plt.title("Bar Chart")

# Adding the legends
plt.legend(["bar"])
plt.show()

"""# Histogram"""

import matplotlib.pyplot as plt

# data to display on plots
x = [1,3,5,7,9,2,4,6,8,4,7,2]

# This will plot a simple histogram
plt.hist(x, bins = [1,2,3,4,5,6,7,8,9,10])

# Title to the plot
plt.title("Histogram")

# Adding the legends
plt.legend(["bar"])
plt.show()

"""# Scatter Plot"""

import matplotlib.pyplot as plt
# data to display on plots
x = [3, 1, 3, 12, 2, 4, 4]
y = [3, 2, 1, 4, 5, 6, 7]

# This will plot a simple scatter chart
plt.scatter(x, y)

# Adding legend to the plot
plt.legend("A")

# Title to the plot
plt.title("Scatter chart")
plt.show()

"""# Stack Plot"""

import matplotlib.pyplot as plt

# List of Days
days = [1, 2, 3, 4, 5]

# No of Study Hours
Studying = [7, 8, 6, 11, 7]

# No of Playing Hours
playing = [8, 5, 7, 8, 13]

# Stackplot with X, Y, colors value
plt.stackplot(days, Studying, playing,
            colors =['y', 'r'])

# Days
plt.xlabel('Days')

# No of hours
plt.ylabel('No of Hours')

# Title of Graph
plt.title('Representation of Study and \
Playing wrt to Days')

# Displaying Graph
plt.show()

"""# Box Plot"""

# Import libraries
import matplotlib.pyplot as plt
import numpy as np

# Creating dataset
np.random.seed(10000)
data = np.random.normal(10, 20, 30)

fig = plt.figure(figsize =(5, 3.5))

# Creating plot
plt.boxplot(data)

# show plot
plt.show()

"""# Pie Chart"""

import matplotlib.pyplot as plt
# data to display on plots
x = [3,1,6,4]

# this will explode the 1st wedge
# i.e. will separate the 1st wedge
# from the chart
e  =(0, 0, 0, 0.1)

# This will plot a simple pie chart
plt.pie(x, explode = e)

# Title to the plot
plt.title("Pie chart")
plt.show()

"""# Error Plot"""

# importing matplotlib
import matplotlib.pyplot as plt


# making a simple plot
x =[7,1,6,3,4,2,5]
y =[1,1,2,2,3,1,2]

# creating error
y_error = 0.5

# plotting graph
plt.plot(x, y)

plt.errorbar(x, y,
            yerr = y_error,
            fmt ='o')

"""# Violin Plot"""

import numpy as np
import matplotlib.pyplot as plt

# creating a list of
# uniformly distributed values
uniform = np.arange(-100, 100)

# creating a list of normally
# distributed values
normal = np.random.normal(size = 100)*30

# creating figure and axes to
# plot the image
fig, (ax1, ax2) = plt.subplots(nrows = 1,
                            ncols = 2,
                            figsize =(9, 4),
                            sharey = True)

# plotting violin plot for
# uniform distribution
ax1.set_title('Uniform Distribution')
ax1.set_ylabel('Observed values')
ax1.violinplot(uniform)

# plotting violin plot for
# normal distribution
ax2.set_title('Normal Distribution')
ax2.violinplot(normal)

# Function to show the plot
plt.show()

"""# 3D Plot"""

import matplotlib.pyplot as plt
# Creating the figure object
fig = plt.figure()

# keeping the projection = 3d
# creates the 3d plot
ax = plt.axes(projection = '3d')
plt.show()

import matplotlib.pyplot as plt
x = [1, 2, 3, 4, 5]
y = [1, 4, 9, 16, 25]
z = [1, 8, 27, 64, 125]
# Creating the figure object
fig = plt.figure()
# keeping the projection = 3d
# creates the 3d plot
ax = plt.axes(projection = '3d')
ax.plot3D(z, y, x)
plt.show()

